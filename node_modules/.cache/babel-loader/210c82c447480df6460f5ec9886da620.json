{"ast":null,"code":"var _jsxFileName = \"/Users/Sveta/Documents/Projects/new_projects_react/my-app/src/App.js\";\nimport { Component } from 'react';\nimport './App.css';\nimport CardList from './Components/card-list/card-list.component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.onSearchChange = event => {\n      const searchField = event.target.value.toLocaleLowerCase();\n      this.setState(() => {\n        return {\n          searchField\n        }; //its the same like - { searchField : searchField}\n      });\n    };\n\n    this.state = {\n      monsters: [],\n      searchField: \"\" //its a string of search input ---> empty on the start\n\n    };\n    console.log('Constructor');\n  }\n\n  componentDidMount() {\n    console.log('Component Did Mount');\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => this.setState(() => {\n      return {\n        monsters: users\n      };\n    }, () => console.log(this.state))).catch(error => console.log('I have failed'));\n  }\n\n  render() {\n    console.log(\"Render\");\n    const {\n      onSearchChange\n    } = this;\n    const {\n      monsters,\n      searchField\n    } = this.state; //a new array for monsters after filtering\n\n    const filteredMonsters = monsters.filter(monster => {\n      return monster.name.toLocaleLowerCase().includes(searchField);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"search-box\",\n        type: \"search\",\n        placeholder: \"Search monsters\",\n        onChange: onSearchChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardList, {\n        monsters: \"I am the Monsters\",\n        anything: [\"1,'2\"]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["Component","CardList","App","constructor","onSearchChange","event","searchField","target","value","toLocaleLowerCase","setState","state","monsters","console","log","componentDidMount","fetch","then","response","json","users","catch","error","render","filteredMonsters","filter","monster","name","includes"],"sources":["/Users/Sveta/Documents/Projects/new_projects_react/my-app/src/App.js"],"sourcesContent":["import { Component} from 'react';\nimport './App.css';\nimport CardList from './Components/card-list/card-list.component';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      monsters : [],\n      searchField : \"\", //its a string of search input ---> empty on the start\n    };\n    \n    console.log('Constructor')\n\n  }\n\n  componentDidMount(){\n\n    console.log('Component Did Mount');\n\n    fetch ('https://jsonplaceholder.typicode.com/users')\n    .then((response) => response.json())\n    .then((users) => this.setState(() => {\n      return { monsters: users };\n    },\n      () => console.log(this.state))\n    )\n    .catch( error => console.log('I have failed'));\n  }\n\n  onSearchChange = (event) =>{\n    const searchField = event.target.value.toLocaleLowerCase();\n    this.setState(() => {\n      return { searchField }//its the same like - { searchField : searchField}\n    });\n  }\n  \n  render(){\n\n    console.log(\"Render\");\n    const { onSearchChange } = this;\n    const { monsters, searchField } = this.state; \n    //a new array for monsters after filtering\n    const filteredMonsters = monsters.filter((monster) => {\n      return monster.name.toLocaleLowerCase().includes(searchField);\n    });\n\n    return (\n      <div className=\"App\">\n        <input \n          className='search-box' \n          type='search' \n          placeholder='Search monsters' \n          onChange={onSearchChange}\n        />\n        {/* { // in filter method we need key value , for more optimezation then the component is updating or re-rendering.\n          filteredMonsters.map((monster) => {\n            return <h1 key = {monster.id}> {monster.name} </h1>\n          })\n        } */}\n       <CardList monsters = {\"I am the Monsters\"} anything ={[\"1,'2\"]}/>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n"],"mappings":";AAAA,SAASA,SAAT,QAAyB,OAAzB;AACA,OAAO,WAAP;AACA,OAAOC,QAAP,MAAqB,4CAArB;;;AAEA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;EAC1BG,WAAW,GAAE;IACX;;IADW,KAyBbC,cAzBa,GAyBKC,KAAD,IAAU;MACzB,MAAMC,WAAW,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmBC,iBAAnB,EAApB;MACA,KAAKC,QAAL,CAAc,MAAM;QAClB,OAAO;UAAEJ;QAAF,CAAP,CADkB,CACI;MACvB,CAFD;IAGD,CA9BY;;IAEX,KAAKK,KAAL,GAAa;MACXC,QAAQ,EAAG,EADA;MAEXN,WAAW,EAAG,EAFH,CAEO;;IAFP,CAAb;IAKAO,OAAO,CAACC,GAAR,CAAY,aAAZ;EAED;;EAEDC,iBAAiB,GAAE;IAEjBF,OAAO,CAACC,GAAR,CAAY,qBAAZ;IAEAE,KAAK,CAAE,4CAAF,CAAL,CACCC,IADD,CACOC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADpB,EAECF,IAFD,CAEOG,KAAD,IAAW,KAAKV,QAAL,CAAc,MAAM;MACnC,OAAO;QAAEE,QAAQ,EAAEQ;MAAZ,CAAP;IACD,CAFgB,EAGf,MAAMP,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAjB,CAHS,CAFjB,EAOCU,KAPD,CAOQC,KAAK,IAAIT,OAAO,CAACC,GAAR,CAAY,eAAZ,CAPjB;EAQD;;EASDS,MAAM,GAAE;IAENV,OAAO,CAACC,GAAR,CAAY,QAAZ;IACA,MAAM;MAAEV;IAAF,IAAqB,IAA3B;IACA,MAAM;MAAEQ,QAAF;MAAYN;IAAZ,IAA4B,KAAKK,KAAvC,CAJM,CAKN;;IACA,MAAMa,gBAAgB,GAAGZ,QAAQ,CAACa,MAAT,CAAiBC,OAAD,IAAa;MACpD,OAAOA,OAAO,CAACC,IAAR,CAAalB,iBAAb,GAAiCmB,QAAjC,CAA0CtB,WAA1C,CAAP;IACD,CAFwB,CAAzB;IAIA,oBACE;MAAK,SAAS,EAAC,KAAf;MAAA,wBACE;QACE,SAAS,EAAC,YADZ;QAEE,IAAI,EAAC,QAFP;QAGE,WAAW,EAAC,iBAHd;QAIE,QAAQ,EAAEF;MAJZ;QAAA;QAAA;QAAA;MAAA,QADF,eAYC,QAAC,QAAD;QAAU,QAAQ,EAAI,mBAAtB;QAA2C,QAAQ,EAAG,CAAC,MAAD;MAAtD;QAAA;QAAA;QAAA;MAAA,QAZD;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAgBD;;AA3DyB;;AA+D5B,eAAeF,GAAf"},"metadata":{},"sourceType":"module"}